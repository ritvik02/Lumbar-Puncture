{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "V100"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4X3iny-NLC-4",
        "outputId": "346526dc-8eef-42b4-bb2a-b46231d42fa6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision.models as models\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.data import Dataset, DataLoader, random_split\n",
        "from PIL import Image\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n",
        "from tqdm import tqdm\n",
        "import numpy as np\n",
        "from sklearn.metrics import classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Define Custom Dataset\n",
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, root_dir, sub_folder, transform):\n",
        "        self.root_dir = root_dir\n",
        "        self.sub_folder = sub_folder\n",
        "        self.transform = transform\n",
        "        self.image_paths = []\n",
        "        self.labels = []\n",
        "\n",
        "        # Iterate through the video folders\n",
        "        for video_folder in os.listdir(os.path.join(root_dir, sub_folder)):\n",
        "            if os.path.isdir(os.path.join(root_dir, sub_folder, video_folder)):\n",
        "                video_path = os.path.join(root_dir, sub_folder, video_folder)   # DSI_research/video/AM12\n",
        "                label_file = os.path.join(root_dir, 'shortaxis_binary.xlsx')   #DSI_research/shortaxis_binary.xlsx\n",
        "                labels_df = pd.read_excel(label_file, sheet_name=f'{video_folder}')\n",
        "\n",
        "                # Iterate through image files and corresponding labels\n",
        "                for img_filename in os.listdir(video_path):   #video_path = DSI_research/video/AM12\n",
        "                    if img_filename.endswith(\".jpg\"):\n",
        "                        img_path = os.path.join(video_path, img_filename)   #dataset/AM12/xxx_0.jpg\n",
        "                        # frame_idx = int(os.path.splitext(img_filename)[0]) #splitting 0.jpg and storing 0 to frame_idx\n",
        "                        root, ext = os.path.splitext(img_filename)  # Split xxx_0.jpg into root and extension\n",
        "                        frame_idx = int(root.split('_')[-1]) #splitting xxx_0 and storing 0 to frame_idx\n",
        "                        labels = labels_df.loc[frame_idx, ['BAD QUALITY','CORD','FLUID']].values.astype('float32').squeeze()\n",
        "\n",
        "                        self.image_paths.append(img_path)\n",
        "                        self.labels.append(labels)\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.image_paths)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        img_path = self.image_paths[idx]\n",
        "        image = Image.open(img_path).convert('RGB')\n",
        "        labels = self.labels[idx]\n",
        "\n",
        "        if self.transform:\n",
        "            image = self.transform(image)\n",
        "\n",
        "        return image, labels\n",
        "\n",
        "\n",
        "# Initialize Dataset and Dataloader\n",
        "def initialize_data(root_dir, sub_folder):\n",
        "    # Define image transformations\n",
        "    transform = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor(),])\n",
        "    train_dataset = CustomDataset(root_dir, sub_folder = sub_folder, transform=transform)\n",
        "\n",
        "    # Define the sizes for training, validation, and test sets\n",
        "    total_size = len(train_dataset)\n",
        "    train_size = int(0.8 * total_size)\n",
        "    val_size = int(0.1 * total_size)\n",
        "    test_size = total_size - train_size - val_size\n",
        "\n",
        "    # Use random_split to split the dataset\n",
        "    # torch.cuda.manual_seed_all(0)  # Setting the random seed\n",
        "    train_subset, val_subset, test_subset = random_split(train_dataset, [train_size, val_size, test_size])\n",
        "\n",
        "    # Create data loaders for each subset\n",
        "    batch_size = 32  # Adjust as needed\n",
        "    train_loader = DataLoader(train_subset, batch_size=batch_size, shuffle=True)\n",
        "    val_loader = DataLoader(val_subset, batch_size=batch_size, shuffle=False)\n",
        "    test_loader = DataLoader(test_subset, batch_size=batch_size, shuffle=False)\n",
        "\n",
        "    return train_loader, val_loader, test_loader\n",
        "\n",
        "# Define Model\n",
        "class CustomResNet(nn.Module):\n",
        "    def __init__(self, num_classes):\n",
        "        super(CustomResNet, self).__init__()\n",
        "        self.resnet = models.resnet18(pretrained=True)\n",
        "        num_features = self.resnet.fc.in_features\n",
        "        self.resnet.fc = nn.Sequential(\n",
        "            nn.Linear(num_features, num_classes),\n",
        "            nn.Sigmoid()  # Sigmoid activation for multi-label classification\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.resnet(x)\n",
        "\n",
        "# Train Model\n",
        "def train_model(train_loader, val_loader, model, criterion, optimizer, num_epochs):\n",
        "    global num_classes\n",
        "    global device\n",
        "    train_losses = []\n",
        "    train_accuracies = []\n",
        "    val_losses = []\n",
        "    val_accuracies = []\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        # Initialize loss and accuracy variables for this epoch\n",
        "        running_loss = 0.0\n",
        "        correct_predictions = 0\n",
        "\n",
        "        # Initialize the progress bar\n",
        "        train_progress_bar = tqdm(train_loader, total=len(train_loader), desc=f'Epoch {epoch + 1}', position=0,leave=True)\n",
        "\n",
        "        for images, labels in train_progress_bar:\n",
        "            images, labels = images.to(device), labels.to(device)  # Move data to GPU\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(images)\n",
        "            predicts = (outputs > 0.5).float()\n",
        "            acc = (predicts == labels).sum().item() / (images.size(0) * num_classes)\n",
        "            loss = criterion(outputs, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            train_loss = loss.item()\n",
        "            running_loss += train_loss * images.size(0)\n",
        "            correct_predictions += acc * images.size(0)\n",
        "\n",
        "            # Update the progress bar with the loss and accuracy\n",
        "            train_progress_bar.set_postfix({'Batch Loss': train_loss, 'Batch Accuracy': acc})\n",
        "\n",
        "        # Calculate average loss and accuracy for the epoch\n",
        "        epoch_loss = running_loss / len(train_loader.dataset)\n",
        "        epoch_accuracy = correct_predictions / len(train_loader.dataset)\n",
        "        train_losses.append(epoch_loss)\n",
        "        train_accuracies.append(epoch_accuracy)\n",
        "\n",
        "        print(f'Epoch {epoch+1}/{num_epochs} - Loss: {epoch_loss:.4f}, Accuracy: {epoch_accuracy:.4f}')\n",
        "\n",
        "        # Validation loop\n",
        "        print('Validation:')\n",
        "        model.eval()\n",
        "        val_running_loss = 0.0\n",
        "        val_correct_predictions = 0\n",
        "\n",
        "        # Initialize the progress bar for validation\n",
        "        val_progress_bar = tqdm(val_loader, total=len(val_loader), desc=f'Epoch {epoch + 1}', position=0,leave=True)\n",
        "\n",
        "        with torch.no_grad():\n",
        "            for images, labels in val_progress_bar:\n",
        "                images, labels = images.to(device), labels.to(device)\n",
        "                outputs = model(images)\n",
        "                predicts = (outputs > 0.5).float()\n",
        "                acc = (predicts == labels).sum().item() / (images.size(0) * num_classes)\n",
        "                loss = criterion(outputs, labels)\n",
        "\n",
        "                val_loss = loss.item()\n",
        "                val_running_loss += val_loss * images.size(0)\n",
        "                val_correct_predictions += acc * images.size(0)\n",
        "\n",
        "                # Update the progress bar with the loss and accuracy\n",
        "                val_progress_bar.set_postfix({'Batch Loss': val_loss, 'Batch Accuracy': acc})\n",
        "        # Calculate average loss and accuracy for the validation\n",
        "        val_epoch_loss = val_running_loss / len(val_loader.dataset)\n",
        "        val_epoch_accuracy = val_correct_predictions / len(val_loader.dataset)\n",
        "        val_losses.append(val_epoch_loss)\n",
        "        val_accuracies.append(val_epoch_accuracy)\n",
        "\n",
        "        print(f'Validation Epoch {epoch+1}/{num_epochs} - Loss: {val_epoch_loss:.4f}, Accuracy: {val_epoch_accuracy:.4f}')\n",
        "        print('------------------------------------------------------------------------------------------------')\n",
        "\n",
        "    return train_losses, train_accuracies, val_losses, val_accuracies\n",
        "\n",
        "# Test Model\n",
        "def test_model(test_loader, model, criterion):\n",
        "    global num_classes\n",
        "    global device\n",
        "    # Initialize variables to store predictions and true labels\n",
        "    all_preds = []\n",
        "    all_labels = []\n",
        "\n",
        "    # Test loop\n",
        "    model.eval()  # Set the model to evaluation mode\n",
        "    test_running_loss = 0.0\n",
        "    test_correct_predictions = 0\n",
        "\n",
        "    # Initialize the progress bar for testing\n",
        "    test_progress_bar = tqdm(test_loader, total=len(test_loader), desc='Testing', position=0, leave=True)\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for images, labels in test_progress_bar:\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "            outputs = model(images)\n",
        "            predicts = (outputs > 0.5).float()\n",
        "\n",
        "            # Store predictions and true labels for later metrics calculation\n",
        "            all_preds.extend(predicts.cpu().numpy())\n",
        "            all_labels.extend(labels.cpu().numpy())\n",
        "\n",
        "            acc = (predicts == labels).sum().item() / (images.size(0) * num_classes)\n",
        "            loss = criterion(outputs, labels)\n",
        "\n",
        "            test_loss = loss.item()\n",
        "            test_running_loss += test_loss * images.size(0)\n",
        "            test_correct_predictions += acc * images.size(0)\n",
        "\n",
        "            # Update the progress bar with the loss and accuracy\n",
        "            test_progress_bar.set_postfix({'Batch Loss': test_loss, 'Batch Accuracy': acc})\n",
        "\n",
        "    # Calculate average loss and accuracy for the test set\n",
        "    test_epoch_loss = test_running_loss / len(test_loader.dataset)\n",
        "    test_epoch_accuracy = test_correct_predictions / len(test_loader.dataset)\n",
        "\n",
        "    # Calculate other metrics\n",
        "    precision = precision_score(np.array(all_labels).flatten(), np.array(all_preds).flatten())\n",
        "    recall = recall_score(np.array(all_labels).flatten(), np.array(all_preds).flatten())\n",
        "    f1 = f1_score(np.array(all_labels).flatten(), np.array(all_preds).flatten())\n",
        "    roc_auc = roc_auc_score(np.array(all_labels).flatten(), np.array(all_preds).flatten())\n",
        "\n",
        "    print(\"\\n\" + \"=\"*50)\n",
        "    print(f'Test Metrics:')\n",
        "    print(f'{\"-\"*50}')\n",
        "    print(f'Loss      : {test_epoch_loss:.4f}')\n",
        "    print(f'Accuracy  : {test_epoch_accuracy:.4f}')\n",
        "    print(f'Precision : {precision:.4f}')\n",
        "    print(f'Recall    : {recall:.4f}')\n",
        "    print(f'F1 Score  : {f1:.4f}')\n",
        "    print(f'ROC AUC   : {roc_auc:.4f}')\n",
        "    print(\"=\"*50)\n",
        "\n",
        "    # Initialize variables to store class-wise metrics\n",
        "    class_precisions = []\n",
        "    class_recalls = []\n",
        "    class_f1s = []\n",
        "    class_roc_aucs = []\n",
        "\n",
        "    # Calculate metrics for each class\n",
        "    num_classes = np.array(all_labels).shape[1]  # Assuming all_labels is a 2D array\n",
        "    for i in range(num_classes):\n",
        "        y_true = np.array(all_labels)[:, i]\n",
        "        y_pred = np.array(all_preds)[:, i]\n",
        "\n",
        "        precision = precision_score(y_true, y_pred, zero_division=0)\n",
        "        recall = recall_score(y_true, y_pred, zero_division=0)\n",
        "        f1 = f1_score(y_true, y_pred, zero_division=0)\n",
        "        roc_auc = roc_auc_score(y_true, y_pred)\n",
        "\n",
        "        class_precisions.append(precision)\n",
        "        class_recalls.append(recall)\n",
        "        class_f1s.append(f1)\n",
        "        class_roc_aucs.append(roc_auc)\n",
        "\n",
        "        print(f\"Metrics for class {i}:\")\n",
        "        print(f\"  Precision : {precision:.4f}\")\n",
        "        print(f\"  Recall    : {recall:.4f}\")\n",
        "        print(f\"  F1 Score  : {f1:.4f}\")\n",
        "        print(f\"  ROC AUC   : {roc_auc:.4f}\")\n",
        "        print(\"-\"*20)\n",
        "\n",
        "    # If you want a summary report\n",
        "    print(\"Summary Classification Report:\")\n",
        "    print(classification_report(np.array(all_labels), np.array(all_preds), zero_division=0))\n",
        "\n",
        "# Main function to run the whole pipeline\n",
        "def main(root_dir, sub_folder, num_epochs):\n",
        "    # Initialize Data\n",
        "    train_loader, val_loader, test_loader = initialize_data(root_dir, sub_folder)\n",
        "\n",
        "    # Initialize Model, Loss, and Optimizer\n",
        "    global device\n",
        "    model = CustomResNet(num_classes).to(device)\n",
        "    criterion = nn.BCELoss()\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n",
        "\n",
        "    # Train Model\n",
        "    # train_model(train_loader, val_loader, model, criterion, optimizer, num_epochs=5)\n",
        "    train_losses, train_accuracies, val_losses, val_accuracies = train_model(train_loader, val_loader, model, criterion, optimizer, num_epochs=num_epochs)\n",
        "\n",
        "    # Plotting the training and validation loss\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(train_losses, label='Train Loss')\n",
        "    plt.plot(val_losses, label='Validation Loss')\n",
        "    plt.title('Epoch vs Loss')\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.legend()\n",
        "\n",
        "    # Plotting the training and validation accuracy\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(train_accuracies, label='Train Accuracy')\n",
        "    plt.plot(val_accuracies, label='Validation Accuracy')\n",
        "    plt.title('Epoch vs Accuracy')\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Test Model\n",
        "    test_model(test_loader, model, criterion)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    # Define root directory and sub-folder name\n",
        "    # root_dir = '/content/drive/Othercomputers/My Mac/DSI_research'\n",
        "    root_dir = '/content/drive/MyDrive/DSI_research'\n",
        "    sub_folder = 'video'\n",
        "    num_classes=3\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "    # Run the main function\n",
        "    main(root_dir, sub_folder, num_epochs=50)"
      ],
      "metadata": {
        "id": "A1eTgSjShcgi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "c933bae6-284f-4772-acbf-573c03000bcc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n",
            "Epoch 1: 100%|██████████| 40/40 [00:09<00:00,  4.11it/s, Batch Loss=0.0413, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50 - Loss: 0.1930, Accuracy: 0.9201\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 1: 100%|██████████| 5/5 [00:01<00:00,  3.56it/s, Batch Loss=1.04, Batch Accuracy=0.7]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 1/50 - Loss: 0.7564, Accuracy: 0.7553\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 2: 100%|██████████| 40/40 [00:09<00:00,  4.10it/s, Batch Loss=0.0734, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2/50 - Loss: 0.0728, Accuracy: 0.9758\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 2: 100%|██████████| 5/5 [00:01<00:00,  4.83it/s, Batch Loss=0.0337, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 2/50 - Loss: 0.0725, Accuracy: 0.9768\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3: 100%|██████████| 40/40 [00:10<00:00,  3.91it/s, Batch Loss=0.0373, Batch Accuracy=0.984]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 3/50 - Loss: 0.0544, Accuracy: 0.9835\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3: 100%|██████████| 5/5 [00:01<00:00,  4.77it/s, Batch Loss=0.0115, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 3/50 - Loss: 0.0621, Accuracy: 0.9726\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4: 100%|██████████| 40/40 [00:10<00:00,  3.90it/s, Batch Loss=0.00401, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4/50 - Loss: 0.0308, Accuracy: 0.9892\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4: 100%|██████████| 5/5 [00:01<00:00,  4.63it/s, Batch Loss=0.0179, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 4/50 - Loss: 0.0758, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5: 100%|██████████| 40/40 [00:10<00:00,  3.96it/s, Batch Loss=0.0203, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 5/50 - Loss: 0.0314, Accuracy: 0.9890\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5: 100%|██████████| 5/5 [00:01<00:00,  3.98it/s, Batch Loss=0.0135, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 5/50 - Loss: 0.0439, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6: 100%|██████████| 40/40 [00:09<00:00,  4.22it/s, Batch Loss=0.029, Batch Accuracy=0.984]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 6/50 - Loss: 0.0229, Accuracy: 0.9937\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6: 100%|██████████| 5/5 [00:01<00:00,  3.33it/s, Batch Loss=0.0054, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 6/50 - Loss: 0.0409, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7: 100%|██████████| 40/40 [00:10<00:00,  3.88it/s, Batch Loss=0.095, Batch Accuracy=0.952]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 7/50 - Loss: 0.0272, Accuracy: 0.9911\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7: 100%|██████████| 5/5 [00:01<00:00,  4.84it/s, Batch Loss=0.0121, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 7/50 - Loss: 0.0456, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8: 100%|██████████| 40/40 [00:10<00:00,  3.87it/s, Batch Loss=0.00399, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 8/50 - Loss: 0.0250, Accuracy: 0.9905\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8: 100%|██████████| 5/5 [00:01<00:00,  4.79it/s, Batch Loss=0.00858, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 8/50 - Loss: 0.0392, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9: 100%|██████████| 40/40 [00:10<00:00,  3.89it/s, Batch Loss=0.00695, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 9/50 - Loss: 0.0184, Accuracy: 0.9937\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9: 100%|██████████| 5/5 [00:01<00:00,  4.68it/s, Batch Loss=0.0135, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 9/50 - Loss: 0.0477, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10: 100%|██████████| 40/40 [00:10<00:00,  3.97it/s, Batch Loss=0.011, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 10/50 - Loss: 0.0217, Accuracy: 0.9916\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10: 100%|██████████| 5/5 [00:01<00:00,  3.70it/s, Batch Loss=0.0271, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 10/50 - Loss: 0.0584, Accuracy: 0.9810\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 11: 100%|██████████| 40/40 [00:09<00:00,  4.27it/s, Batch Loss=0.00488, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 11/50 - Loss: 0.0212, Accuracy: 0.9924\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 11: 100%|██████████| 5/5 [00:01<00:00,  4.21it/s, Batch Loss=0.041, Batch Accuracy=0.978]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 11/50 - Loss: 0.0997, Accuracy: 0.9747\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 12: 100%|██████████| 40/40 [00:10<00:00,  3.92it/s, Batch Loss=0.00527, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 12/50 - Loss: 0.0195, Accuracy: 0.9908\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 12: 100%|██████████| 5/5 [00:01<00:00,  4.80it/s, Batch Loss=0.141, Batch Accuracy=0.967]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 12/50 - Loss: 0.1188, Accuracy: 0.9641\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 13: 100%|██████████| 40/40 [00:10<00:00,  3.89it/s, Batch Loss=0.00545, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 13/50 - Loss: 0.0268, Accuracy: 0.9924\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 13: 100%|██████████| 5/5 [00:01<00:00,  4.80it/s, Batch Loss=0.108, Batch Accuracy=0.944]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 13/50 - Loss: 0.1383, Accuracy: 0.9641\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 14: 100%|██████████| 40/40 [00:10<00:00,  3.93it/s, Batch Loss=0.00973, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 14/50 - Loss: 0.0193, Accuracy: 0.9947\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 14: 100%|██████████| 5/5 [00:01<00:00,  4.91it/s, Batch Loss=0.0636, Batch Accuracy=0.978]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 14/50 - Loss: 0.0866, Accuracy: 0.9684\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 15: 100%|██████████| 40/40 [00:09<00:00,  4.20it/s, Batch Loss=0.00226, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 15/50 - Loss: 0.0166, Accuracy: 0.9958\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 15: 100%|██████████| 5/5 [00:01<00:00,  3.56it/s, Batch Loss=0.00196, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 15/50 - Loss: 0.0501, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 16: 100%|██████████| 40/40 [00:09<00:00,  4.16it/s, Batch Loss=0.00609, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 16/50 - Loss: 0.0162, Accuracy: 0.9942\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 16: 100%|██████████| 5/5 [00:01<00:00,  4.82it/s, Batch Loss=0.0118, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 16/50 - Loss: 0.0799, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 17: 100%|██████████| 40/40 [00:10<00:00,  3.90it/s, Batch Loss=0.00768, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 17/50 - Loss: 0.0132, Accuracy: 0.9968\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 17: 100%|██████████| 5/5 [00:01<00:00,  4.72it/s, Batch Loss=0.000245, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 17/50 - Loss: 0.0570, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 18: 100%|██████████| 40/40 [00:10<00:00,  3.88it/s, Batch Loss=0.0248, Batch Accuracy=0.984]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 18/50 - Loss: 0.0114, Accuracy: 0.9966\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 18: 100%|██████████| 5/5 [00:01<00:00,  4.73it/s, Batch Loss=0.00783, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 18/50 - Loss: 0.0860, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 19: 100%|██████████| 40/40 [00:10<00:00,  3.95it/s, Batch Loss=0.0789, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 19/50 - Loss: 0.0064, Accuracy: 0.9974\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 19: 100%|██████████| 5/5 [00:01<00:00,  4.61it/s, Batch Loss=0.000287, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 19/50 - Loss: 0.0563, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 20: 100%|██████████| 40/40 [00:09<00:00,  4.26it/s, Batch Loss=0.00187, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 20/50 - Loss: 0.0043, Accuracy: 0.9984\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 20: 100%|██████████| 5/5 [00:01<00:00,  3.63it/s, Batch Loss=0.000256, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 20/50 - Loss: 0.0663, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 21: 100%|██████████| 40/40 [00:09<00:00,  4.03it/s, Batch Loss=0.00444, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 21/50 - Loss: 0.0040, Accuracy: 0.9982\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 21: 100%|██████████| 5/5 [00:01<00:00,  4.81it/s, Batch Loss=0.000219, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 21/50 - Loss: 0.0701, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 22: 100%|██████████| 40/40 [00:10<00:00,  3.94it/s, Batch Loss=0.000141, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 22/50 - Loss: 0.0016, Accuracy: 0.9995\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 22: 100%|██████████| 5/5 [00:01<00:00,  4.76it/s, Batch Loss=0.000269, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 22/50 - Loss: 0.0654, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 23: 100%|██████████| 40/40 [00:10<00:00,  3.87it/s, Batch Loss=0.000701, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 23/50 - Loss: 0.0006, Accuracy: 0.9997\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 23: 100%|██████████| 5/5 [00:01<00:00,  4.74it/s, Batch Loss=8.63e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 23/50 - Loss: 0.0710, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 24: 100%|██████████| 40/40 [00:10<00:00,  3.95it/s, Batch Loss=0.000123, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 24/50 - Loss: 0.0003, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 24: 100%|██████████| 5/5 [00:01<00:00,  3.70it/s, Batch Loss=9.74e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 24/50 - Loss: 0.0752, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 25: 100%|██████████| 40/40 [00:09<00:00,  4.20it/s, Batch Loss=0.00127, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 25/50 - Loss: 0.0011, Accuracy: 0.9997\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 25: 100%|██████████| 5/5 [00:01<00:00,  4.03it/s, Batch Loss=0.0284, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 25/50 - Loss: 0.0859, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 26: 100%|██████████| 40/40 [00:10<00:00,  3.91it/s, Batch Loss=0.00233, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 26/50 - Loss: 0.0033, Accuracy: 0.9987\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 26: 100%|██████████| 5/5 [00:01<00:00,  4.75it/s, Batch Loss=0.00758, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 26/50 - Loss: 0.0936, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 27: 100%|██████████| 40/40 [00:10<00:00,  3.84it/s, Batch Loss=0.000573, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 27/50 - Loss: 0.0078, Accuracy: 0.9976\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 27: 100%|██████████| 5/5 [00:01<00:00,  4.76it/s, Batch Loss=0.00884, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 27/50 - Loss: 0.0750, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 28: 100%|██████████| 40/40 [00:10<00:00,  3.88it/s, Batch Loss=0.00349, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 28/50 - Loss: 0.0061, Accuracy: 0.9979\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 28: 100%|██████████| 5/5 [00:01<00:00,  4.76it/s, Batch Loss=0.000382, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 28/50 - Loss: 0.0542, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 29: 100%|██████████| 40/40 [00:09<00:00,  4.08it/s, Batch Loss=0.000126, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 29/50 - Loss: 0.0058, Accuracy: 0.9971\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 29: 100%|██████████| 5/5 [00:01<00:00,  3.56it/s, Batch Loss=0.000946, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 29/50 - Loss: 0.0482, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 30: 100%|██████████| 40/40 [00:09<00:00,  4.22it/s, Batch Loss=0.000187, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 30/50 - Loss: 0.0033, Accuracy: 0.9987\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 30: 100%|██████████| 5/5 [00:01<00:00,  4.76it/s, Batch Loss=8.03e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 30/50 - Loss: 0.0633, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 31: 100%|██████████| 40/40 [00:10<00:00,  3.92it/s, Batch Loss=0.00766, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 31/50 - Loss: 0.0056, Accuracy: 0.9974\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 31: 100%|██████████| 5/5 [00:01<00:00,  4.76it/s, Batch Loss=0.0172, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 31/50 - Loss: 0.1338, Accuracy: 0.9641\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 32: 100%|██████████| 40/40 [00:10<00:00,  3.89it/s, Batch Loss=0.129, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 32/50 - Loss: 0.0192, Accuracy: 0.9940\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 32: 100%|██████████| 5/5 [00:01<00:00,  4.67it/s, Batch Loss=0.0218, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 32/50 - Loss: 0.1301, Accuracy: 0.9515\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 33: 100%|██████████| 40/40 [00:10<00:00,  3.92it/s, Batch Loss=0.144, Batch Accuracy=0.937]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 33/50 - Loss: 0.0678, Accuracy: 0.9758\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 33: 100%|██████████| 5/5 [00:01<00:00,  4.75it/s, Batch Loss=0.0616, Batch Accuracy=0.967]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 33/50 - Loss: 0.0579, Accuracy: 0.9810\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 34: 100%|██████████| 40/40 [00:09<00:00,  4.12it/s, Batch Loss=0.016, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 34/50 - Loss: 0.0363, Accuracy: 0.9911\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 34: 100%|██████████| 5/5 [00:01<00:00,  3.63it/s, Batch Loss=0.0308, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 34/50 - Loss: 0.0582, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 35: 100%|██████████| 40/40 [00:09<00:00,  4.13it/s, Batch Loss=0.0114, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 35/50 - Loss: 0.0176, Accuracy: 0.9940\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 35: 100%|██████████| 5/5 [00:01<00:00,  4.79it/s, Batch Loss=0.00125, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 35/50 - Loss: 0.0716, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 36: 100%|██████████| 40/40 [00:10<00:00,  3.91it/s, Batch Loss=0.00115, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 36/50 - Loss: 0.0071, Accuracy: 0.9971\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 36: 100%|██████████| 5/5 [00:01<00:00,  4.65it/s, Batch Loss=0.000335, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 36/50 - Loss: 0.0349, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 37: 100%|██████████| 40/40 [00:10<00:00,  3.83it/s, Batch Loss=0.000657, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 37/50 - Loss: 0.0101, Accuracy: 0.9971\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 37: 100%|██████████| 5/5 [00:01<00:00,  4.82it/s, Batch Loss=0.000117, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 37/50 - Loss: 0.0682, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 38: 100%|██████████| 40/40 [00:10<00:00,  3.98it/s, Batch Loss=0.000265, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 38/50 - Loss: 0.0121, Accuracy: 0.9971\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 38: 100%|██████████| 5/5 [00:01<00:00,  4.15it/s, Batch Loss=0.000745, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 38/50 - Loss: 0.0347, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 39: 100%|██████████| 40/40 [00:09<00:00,  4.22it/s, Batch Loss=0.384, Batch Accuracy=0.905]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 39/50 - Loss: 0.0163, Accuracy: 0.9953\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 39: 100%|██████████| 5/5 [00:01<00:00,  3.62it/s, Batch Loss=0.000171, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 39/50 - Loss: 0.0463, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 40: 100%|██████████| 40/40 [00:10<00:00,  3.96it/s, Batch Loss=0.000793, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 40/50 - Loss: 0.0178, Accuracy: 0.9945\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 40: 100%|██████████| 5/5 [00:01<00:00,  4.65it/s, Batch Loss=0.000939, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 40/50 - Loss: 0.0382, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 41: 100%|██████████| 40/40 [00:10<00:00,  3.75it/s, Batch Loss=0.00937, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 41/50 - Loss: 0.0059, Accuracy: 0.9984\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 41: 100%|██████████| 5/5 [00:01<00:00,  4.67it/s, Batch Loss=0.000266, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 41/50 - Loss: 0.0219, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 42: 100%|██████████| 40/40 [00:10<00:00,  3.84it/s, Batch Loss=0.0857, Batch Accuracy=0.952]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 42/50 - Loss: 0.0056, Accuracy: 0.9982\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 42: 100%|██████████| 5/5 [00:01<00:00,  4.73it/s, Batch Loss=9.92e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 42/50 - Loss: 0.0448, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 43: 100%|██████████| 40/40 [00:10<00:00,  3.92it/s, Batch Loss=0.00542, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 43/50 - Loss: 0.0230, Accuracy: 0.9947\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 43: 100%|██████████| 5/5 [00:01<00:00,  3.87it/s, Batch Loss=0.00115, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 43/50 - Loss: 0.0446, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 44: 100%|██████████| 40/40 [00:09<00:00,  4.29it/s, Batch Loss=0.000941, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 44/50 - Loss: 0.0098, Accuracy: 0.9974\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 44: 100%|██████████| 5/5 [00:01<00:00,  3.82it/s, Batch Loss=0.00762, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 44/50 - Loss: 0.0704, Accuracy: 0.9810\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 45: 100%|██████████| 40/40 [00:10<00:00,  3.98it/s, Batch Loss=0.000406, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 45/50 - Loss: 0.0035, Accuracy: 0.9992\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 45: 100%|██████████| 5/5 [00:01<00:00,  4.63it/s, Batch Loss=0.000108, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 45/50 - Loss: 0.0507, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 46: 100%|██████████| 40/40 [00:10<00:00,  3.85it/s, Batch Loss=0.012, Batch Accuracy=0.984]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 46/50 - Loss: 0.0011, Accuracy: 0.9997\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 46: 100%|██████████| 5/5 [00:01<00:00,  4.79it/s, Batch Loss=9.02e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 46/50 - Loss: 0.0369, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 47: 100%|██████████| 40/40 [00:10<00:00,  3.90it/s, Batch Loss=0.00141, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 47/50 - Loss: 0.0137, Accuracy: 0.9961\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 47: 100%|██████████| 5/5 [00:01<00:00,  4.92it/s, Batch Loss=0.109, Batch Accuracy=0.956]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 47/50 - Loss: 0.0979, Accuracy: 0.9726\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 48: 100%|██████████| 40/40 [00:09<00:00,  4.01it/s, Batch Loss=0.0551, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 48/50 - Loss: 0.0146, Accuracy: 0.9950\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 48: 100%|██████████| 5/5 [00:01<00:00,  3.63it/s, Batch Loss=0.00323, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 48/50 - Loss: 0.0588, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 49: 100%|██████████| 40/40 [00:09<00:00,  4.21it/s, Batch Loss=0.00057, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 49/50 - Loss: 0.0123, Accuracy: 0.9963\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 49: 100%|██████████| 5/5 [00:01<00:00,  4.61it/s, Batch Loss=5.74e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 49/50 - Loss: 0.0312, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 50: 100%|██████████| 40/40 [00:10<00:00,  3.81it/s, Batch Loss=0.00065, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 50/50 - Loss: 0.0062, Accuracy: 0.9979\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 50: 100%|██████████| 5/5 [00:01<00:00,  4.79it/s, Batch Loss=0.000256, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 50/50 - Loss: 0.0354, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Testing: 100%|██████████| 5/5 [00:01<00:00,  4.59it/s, Batch Loss=0.000363, Batch Accuracy=1]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "Test Metrics:\n",
            "--------------------------------------------------\n",
            "Loss      : 0.0269\n",
            "Accuracy  : 0.9958\n",
            "Precision : 0.9944\n",
            "Recall    : 0.9944\n",
            "F1 Score  : 0.9944\n",
            "ROC AUC   : 0.9956\n",
            "==================================================\n",
            "Metrics for class 0:\n",
            "  Precision : 0.9545\n",
            "  Recall    : 1.0000\n",
            "  F1 Score  : 0.9767\n",
            "  ROC AUC   : 0.9964\n",
            "--------------------\n",
            "Metrics for class 1:\n",
            "  Precision : 1.0000\n",
            "  Recall    : 1.0000\n",
            "  F1 Score  : 1.0000\n",
            "  ROC AUC   : 1.0000\n",
            "--------------------\n",
            "Metrics for class 2:\n",
            "  Precision : 1.0000\n",
            "  Recall    : 0.9921\n",
            "  F1 Score  : 0.9960\n",
            "  ROC AUC   : 0.9960\n",
            "--------------------\n",
            "Summary Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      1.00      0.98        21\n",
            "           1       1.00      1.00      1.00        33\n",
            "           2       1.00      0.99      1.00       126\n",
            "\n",
            "   micro avg       0.99      0.99      0.99       180\n",
            "   macro avg       0.98      1.00      0.99       180\n",
            "weighted avg       0.99      0.99      0.99       180\n",
            " samples avg       0.91      0.91      0.91       180\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    # Define root directory and sub-folder name\n",
        "    # root_dir = '/content/drive/Othercomputers/My Mac/DSI_research'\n",
        "    root_dir = '/content/drive/MyDrive/DSI_research'\n",
        "    sub_folder = 'equalizeHist'\n",
        "    num_classes=3\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "    # Run the main function\n",
        "    main(root_dir, sub_folder,50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "gRINpzu5Z-s-",
        "outputId": "b38af6bc-6bfc-4ef7-f7e8-e02ab1d51444"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n",
            "Epoch 1: 100%|██████████| 40/40 [00:10<00:00,  3.66it/s, Batch Loss=0.128, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50 - Loss: 0.1509, Accuracy: 0.9412\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 1: 100%|██████████| 5/5 [00:01<00:00,  4.52it/s, Batch Loss=0.0552, Batch Accuracy=0.978]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 1/50 - Loss: 0.0483, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 2: 100%|██████████| 40/40 [00:10<00:00,  3.84it/s, Batch Loss=0.00821, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2/50 - Loss: 0.0613, Accuracy: 0.9782\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 2: 100%|██████████| 5/5 [00:01<00:00,  3.66it/s, Batch Loss=0.139, Batch Accuracy=0.944]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 2/50 - Loss: 0.1252, Accuracy: 0.9494\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3: 100%|██████████| 40/40 [00:09<00:00,  4.14it/s, Batch Loss=0.012, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 3/50 - Loss: 0.0641, Accuracy: 0.9782\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3: 100%|██████████| 5/5 [00:01<00:00,  3.44it/s, Batch Loss=0.156, Batch Accuracy=0.956]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 3/50 - Loss: 0.1329, Accuracy: 0.9515\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4: 100%|██████████| 40/40 [00:10<00:00,  3.91it/s, Batch Loss=0.0188, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4/50 - Loss: 0.0444, Accuracy: 0.9874\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4: 100%|██████████| 5/5 [00:01<00:00,  4.67it/s, Batch Loss=0.0206, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 4/50 - Loss: 0.0407, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5: 100%|██████████| 40/40 [00:10<00:00,  3.75it/s, Batch Loss=0.156, Batch Accuracy=0.921]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 5/50 - Loss: 0.0303, Accuracy: 0.9934\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5: 100%|██████████| 5/5 [00:01<00:00,  4.63it/s, Batch Loss=0.00705, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 5/50 - Loss: 0.0231, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6: 100%|██████████| 40/40 [00:12<00:00,  3.13it/s, Batch Loss=0.0031, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 6/50 - Loss: 0.0220, Accuracy: 0.9932\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6: 100%|██████████| 5/5 [00:01<00:00,  4.56it/s, Batch Loss=0.0382, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 6/50 - Loss: 0.0591, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7: 100%|██████████| 40/40 [00:16<00:00,  2.45it/s, Batch Loss=0.000786, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 7/50 - Loss: 0.0095, Accuracy: 0.9971\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7: 100%|██████████| 5/5 [00:01<00:00,  4.64it/s, Batch Loss=0.0139, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 7/50 - Loss: 0.0266, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8: 100%|██████████| 40/40 [00:10<00:00,  3.77it/s, Batch Loss=0.0397, Batch Accuracy=0.984]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 8/50 - Loss: 0.0367, Accuracy: 0.9866\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8: 100%|██████████| 5/5 [00:01<00:00,  4.54it/s, Batch Loss=0.113, Batch Accuracy=0.922]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 8/50 - Loss: 0.1105, Accuracy: 0.9473\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9: 100%|██████████| 40/40 [00:10<00:00,  3.77it/s, Batch Loss=0.00898, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 9/50 - Loss: 0.0342, Accuracy: 0.9892\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9: 100%|██████████| 5/5 [00:01<00:00,  4.73it/s, Batch Loss=0.0258, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 9/50 - Loss: 0.0328, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10: 100%|██████████| 40/40 [00:10<00:00,  3.80it/s, Batch Loss=0.00958, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 10/50 - Loss: 0.0207, Accuracy: 0.9921\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10: 100%|██████████| 5/5 [00:01<00:00,  3.84it/s, Batch Loss=0.0736, Batch Accuracy=0.978]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 10/50 - Loss: 0.0867, Accuracy: 0.9768\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 11: 100%|██████████| 40/40 [00:09<00:00,  4.02it/s, Batch Loss=0.000702, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 11/50 - Loss: 0.0163, Accuracy: 0.9937\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 11: 100%|██████████| 5/5 [00:01<00:00,  3.40it/s, Batch Loss=0.0502, Batch Accuracy=0.978]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 11/50 - Loss: 0.0470, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 12: 100%|██████████| 40/40 [00:10<00:00,  3.90it/s, Batch Loss=0.00231, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 12/50 - Loss: 0.0336, Accuracy: 0.9916\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 12: 100%|██████████| 5/5 [00:01<00:00,  4.50it/s, Batch Loss=0.396, Batch Accuracy=0.8]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 12/50 - Loss: 0.4190, Accuracy: 0.8249\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 13: 100%|██████████| 40/40 [00:10<00:00,  3.74it/s, Batch Loss=0.000577, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 13/50 - Loss: 0.0171, Accuracy: 0.9937\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 13: 100%|██████████| 5/5 [00:01<00:00,  4.77it/s, Batch Loss=0.00792, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 13/50 - Loss: 0.0305, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 14: 100%|██████████| 40/40 [00:10<00:00,  3.78it/s, Batch Loss=0.00136, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 14/50 - Loss: 0.0094, Accuracy: 0.9974\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 14: 100%|██████████| 5/5 [00:01<00:00,  4.57it/s, Batch Loss=0.00139, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 14/50 - Loss: 0.0426, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 15: 100%|██████████| 40/40 [00:10<00:00,  3.78it/s, Batch Loss=0.000946, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 15/50 - Loss: 0.0053, Accuracy: 0.9974\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 15: 100%|██████████| 5/5 [00:01<00:00,  4.60it/s, Batch Loss=0.00127, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 15/50 - Loss: 0.0474, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 16: 100%|██████████| 40/40 [00:10<00:00,  3.96it/s, Batch Loss=0.0609, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 16/50 - Loss: 0.0042, Accuracy: 0.9984\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 16: 100%|██████████| 5/5 [00:01<00:00,  3.28it/s, Batch Loss=0.000406, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 16/50 - Loss: 0.0438, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 17: 100%|██████████| 40/40 [00:09<00:00,  4.14it/s, Batch Loss=0.000631, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 17/50 - Loss: 0.0019, Accuracy: 0.9995\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 17: 100%|██████████| 5/5 [00:01<00:00,  4.55it/s, Batch Loss=0.00198, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 17/50 - Loss: 0.0710, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 18: 100%|██████████| 40/40 [00:10<00:00,  3.74it/s, Batch Loss=0.000394, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 18/50 - Loss: 0.0072, Accuracy: 0.9982\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 18: 100%|██████████| 5/5 [00:01<00:00,  4.49it/s, Batch Loss=0.0134, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 18/50 - Loss: 0.0537, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 19: 100%|██████████| 40/40 [00:10<00:00,  3.77it/s, Batch Loss=0.00028, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 19/50 - Loss: 0.0058, Accuracy: 0.9976\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 19: 100%|██████████| 5/5 [00:01<00:00,  4.70it/s, Batch Loss=0.00185, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 19/50 - Loss: 0.0327, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 20: 100%|██████████| 40/40 [00:10<00:00,  3.77it/s, Batch Loss=0.000306, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 20/50 - Loss: 0.0113, Accuracy: 0.9984\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 20: 100%|██████████| 5/5 [00:01<00:00,  4.56it/s, Batch Loss=0.103, Batch Accuracy=0.978]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 20/50 - Loss: 0.1071, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 21: 100%|██████████| 40/40 [00:10<00:00,  3.89it/s, Batch Loss=0.00105, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 21/50 - Loss: 0.0091, Accuracy: 0.9971\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 21: 100%|██████████| 5/5 [00:01<00:00,  3.38it/s, Batch Loss=0.00046, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 21/50 - Loss: 0.0381, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 22: 100%|██████████| 40/40 [00:09<00:00,  4.19it/s, Batch Loss=0.00976, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 22/50 - Loss: 0.0089, Accuracy: 0.9963\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 22: 100%|██████████| 5/5 [00:01<00:00,  3.85it/s, Batch Loss=0.139, Batch Accuracy=0.956]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 22/50 - Loss: 0.1882, Accuracy: 0.9346\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 23: 100%|██████████| 40/40 [00:11<00:00,  3.38it/s, Batch Loss=0.000781, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 23/50 - Loss: 0.0128, Accuracy: 0.9955\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 23: 100%|██████████| 5/5 [00:01<00:00,  4.65it/s, Batch Loss=0.0012, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 23/50 - Loss: 0.0101, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 24: 100%|██████████| 40/40 [00:10<00:00,  3.80it/s, Batch Loss=0.0166, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 24/50 - Loss: 0.0170, Accuracy: 0.9947\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 24: 100%|██████████| 5/5 [00:01<00:00,  4.63it/s, Batch Loss=0.892, Batch Accuracy=0.867]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 24/50 - Loss: 0.8595, Accuracy: 0.8481\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 25: 100%|██████████| 40/40 [00:10<00:00,  3.74it/s, Batch Loss=0.00147, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 25/50 - Loss: 0.0178, Accuracy: 0.9958\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 25: 100%|██████████| 5/5 [00:01<00:00,  4.45it/s, Batch Loss=0.000874, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 25/50 - Loss: 0.0197, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 26: 100%|██████████| 40/40 [00:14<00:00,  2.85it/s, Batch Loss=0.0587, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 26/50 - Loss: 0.0139, Accuracy: 0.9968\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 26: 100%|██████████| 5/5 [00:01<00:00,  3.36it/s, Batch Loss=0.00271, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 26/50 - Loss: 0.0273, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 27: 100%|██████████| 40/40 [00:11<00:00,  3.55it/s, Batch Loss=0.000807, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 27/50 - Loss: 0.0073, Accuracy: 0.9968\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 27: 100%|██████████| 5/5 [00:01<00:00,  4.55it/s, Batch Loss=0.000618, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 27/50 - Loss: 0.0169, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 28: 100%|██████████| 40/40 [00:10<00:00,  3.80it/s, Batch Loss=0.00035, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 28/50 - Loss: 0.0028, Accuracy: 0.9989\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 28: 100%|██████████| 5/5 [00:01<00:00,  4.52it/s, Batch Loss=0.00203, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 28/50 - Loss: 0.0324, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 29: 100%|██████████| 40/40 [00:09<00:00,  4.08it/s, Batch Loss=0.000276, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 29/50 - Loss: 0.0049, Accuracy: 0.9989\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 29: 100%|██████████| 5/5 [00:01<00:00,  3.47it/s, Batch Loss=0.000295, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 29/50 - Loss: 0.0256, Accuracy: 0.9895\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 30: 100%|██████████| 40/40 [00:10<00:00,  3.96it/s, Batch Loss=0.00083, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 30/50 - Loss: 0.0045, Accuracy: 0.9992\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 30: 100%|██████████| 5/5 [00:01<00:00,  4.60it/s, Batch Loss=0.00378, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 30/50 - Loss: 0.0202, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 31: 100%|██████████| 40/40 [00:10<00:00,  3.74it/s, Batch Loss=0.00296, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 31/50 - Loss: 0.0018, Accuracy: 0.9997\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 31: 100%|██████████| 5/5 [00:01<00:00,  4.59it/s, Batch Loss=0.000316, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 31/50 - Loss: 0.0298, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 32: 100%|██████████| 40/40 [00:10<00:00,  3.76it/s, Batch Loss=9.38e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 32/50 - Loss: 0.0007, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 32: 100%|██████████| 5/5 [00:01<00:00,  4.57it/s, Batch Loss=0.000209, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 32/50 - Loss: 0.0645, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 33: 100%|██████████| 40/40 [00:10<00:00,  3.74it/s, Batch Loss=0.00473, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 33/50 - Loss: 0.0005, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 33: 100%|██████████| 5/5 [00:01<00:00,  4.60it/s, Batch Loss=0.000103, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 33/50 - Loss: 0.0248, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 34: 100%|██████████| 40/40 [00:10<00:00,  3.96it/s, Batch Loss=0.000173, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 34/50 - Loss: 0.0003, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 34: 100%|██████████| 5/5 [00:01<00:00,  3.40it/s, Batch Loss=5.85e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 34/50 - Loss: 0.0150, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 35: 100%|██████████| 40/40 [00:09<00:00,  4.07it/s, Batch Loss=5.98e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 35/50 - Loss: 0.0002, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 35: 100%|██████████| 5/5 [00:01<00:00,  4.65it/s, Batch Loss=6.78e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 35/50 - Loss: 0.0173, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 36: 100%|██████████| 40/40 [00:10<00:00,  3.78it/s, Batch Loss=2.69e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 36/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 36: 100%|██████████| 5/5 [00:01<00:00,  4.62it/s, Batch Loss=5.67e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 36/50 - Loss: 0.0157, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 37: 100%|██████████| 40/40 [00:10<00:00,  3.76it/s, Batch Loss=3e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 37/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 37: 100%|██████████| 5/5 [00:01<00:00,  4.65it/s, Batch Loss=5.37e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 37/50 - Loss: 0.0168, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 38: 100%|██████████| 40/40 [00:10<00:00,  3.76it/s, Batch Loss=0.000113, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 38/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 38: 100%|██████████| 5/5 [00:01<00:00,  4.26it/s, Batch Loss=8.47e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 38/50 - Loss: 0.0195, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 39: 100%|██████████| 40/40 [00:10<00:00,  3.73it/s, Batch Loss=0.000462, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 39/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 39: 100%|██████████| 5/5 [00:01<00:00,  3.58it/s, Batch Loss=5.11e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 39/50 - Loss: 0.0178, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 40: 100%|██████████| 40/40 [00:09<00:00,  4.10it/s, Batch Loss=5.29e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 40/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 40: 100%|██████████| 5/5 [00:01<00:00,  3.32it/s, Batch Loss=4.15e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 40/50 - Loss: 0.0173, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 41: 100%|██████████| 40/40 [00:10<00:00,  3.81it/s, Batch Loss=8.75e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 41/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 41: 100%|██████████| 5/5 [00:01<00:00,  4.56it/s, Batch Loss=4.12e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 41/50 - Loss: 0.0167, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 42: 100%|██████████| 40/40 [00:10<00:00,  3.76it/s, Batch Loss=3.43e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 42/50 - Loss: 0.0002, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 42: 100%|██████████| 5/5 [00:01<00:00,  4.56it/s, Batch Loss=3.65e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 42/50 - Loss: 0.0159, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 43: 100%|██████████| 40/40 [00:10<00:00,  3.71it/s, Batch Loss=0.000184, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 43/50 - Loss: 0.0002, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 43: 100%|██████████| 5/5 [00:01<00:00,  4.60it/s, Batch Loss=0.000299, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 43/50 - Loss: 0.0429, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 44: 100%|██████████| 40/40 [00:10<00:00,  3.74it/s, Batch Loss=0.000309, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 44/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 44: 100%|██████████| 5/5 [00:01<00:00,  4.67it/s, Batch Loss=0.0001, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 44/50 - Loss: 0.0395, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 45: 100%|██████████| 40/40 [00:10<00:00,  3.95it/s, Batch Loss=0.00014, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 45/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 45: 100%|██████████| 5/5 [00:01<00:00,  3.35it/s, Batch Loss=6.31e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 45/50 - Loss: 0.0334, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 46: 100%|██████████| 40/40 [00:10<00:00,  3.97it/s, Batch Loss=2.31e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 46/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 46: 100%|██████████| 5/5 [00:01<00:00,  4.66it/s, Batch Loss=6.42e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 46/50 - Loss: 0.0331, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 47: 100%|██████████| 40/40 [00:10<00:00,  3.75it/s, Batch Loss=0.000113, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 47/50 - Loss: 0.0000, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 47: 100%|██████████| 5/5 [00:01<00:00,  4.71it/s, Batch Loss=3.6e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 47/50 - Loss: 0.0264, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 48: 100%|██████████| 40/40 [00:10<00:00,  3.74it/s, Batch Loss=1.31e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 48/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 48: 100%|██████████| 5/5 [00:01<00:00,  4.55it/s, Batch Loss=4.55e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 48/50 - Loss: 0.0308, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 49: 100%|██████████| 40/40 [00:10<00:00,  3.78it/s, Batch Loss=0.000443, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 49/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 49: 100%|██████████| 5/5 [00:01<00:00,  4.63it/s, Batch Loss=0.000165, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 49/50 - Loss: 0.0225, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 50: 100%|██████████| 40/40 [00:10<00:00,  3.88it/s, Batch Loss=0.000522, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 50/50 - Loss: 0.0046, Accuracy: 0.9992\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 50: 100%|██████████| 5/5 [00:01<00:00,  3.38it/s, Batch Loss=0.348, Batch Accuracy=0.922]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 50/50 - Loss: 0.2362, Accuracy: 0.9494\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Testing: 100%|██████████| 5/5 [00:01<00:00,  4.60it/s, Batch Loss=0.27, Batch Accuracy=0.969]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "Test Metrics:\n",
            "--------------------------------------------------\n",
            "Loss      : 0.2187\n",
            "Accuracy  : 0.9625\n",
            "Precision : 0.9778\n",
            "Recall    : 0.9263\n",
            "F1 Score  : 0.9514\n",
            "ROC AUC   : 0.9563\n",
            "==================================================\n",
            "Metrics for class 0:\n",
            "  Precision : 0.8333\n",
            "  Recall    : 1.0000\n",
            "  F1 Score  : 0.9091\n",
            "  ROC AUC   : 0.9857\n",
            "--------------------\n",
            "Metrics for class 1:\n",
            "  Precision : 1.0000\n",
            "  Recall    : 0.8571\n",
            "  F1 Score  : 0.9231\n",
            "  ROC AUC   : 0.9286\n",
            "--------------------\n",
            "Metrics for class 2:\n",
            "  Precision : 1.0000\n",
            "  Recall    : 0.9333\n",
            "  F1 Score  : 0.9655\n",
            "  ROC AUC   : 0.9667\n",
            "--------------------\n",
            "Summary Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      1.00      0.91        20\n",
            "           1       1.00      0.86      0.92        35\n",
            "           2       1.00      0.93      0.97       135\n",
            "\n",
            "   micro avg       0.98      0.93      0.95       190\n",
            "   macro avg       0.94      0.93      0.93       190\n",
            "weighted avg       0.98      0.93      0.95       190\n",
            " samples avg       0.91      0.90      0.90       190\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    # Define root directory and sub-folder name\n",
        "    # root_dir = '/content/drive/Othercomputers/My Mac/DSI_research'\n",
        "    root_dir = '/content/drive/MyDrive/DSI_research'\n",
        "    sub_folder = 'clip'\n",
        "    num_classes=3\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "    # Run the main function\n",
        "    main(root_dir, sub_folder,50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ucn9UEsa_ALo",
        "outputId": "ab52f546-782e-4b0a-9e6b-bcb35099995e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n",
            "Epoch 1: 100%|██████████| 40/40 [05:08<00:00,  7.72s/it, Batch Loss=0.0552, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50 - Loss: 0.1729, Accuracy: 0.9304\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 1: 100%|██████████| 5/5 [00:41<00:00,  8.27s/it, Batch Loss=0.674, Batch Accuracy=0.8]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 1/50 - Loss: 0.9162, Accuracy: 0.7342\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 2: 100%|██████████| 40/40 [00:09<00:00,  4.05it/s, Batch Loss=0.0835, Batch Accuracy=0.984]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2/50 - Loss: 0.0733, Accuracy: 0.9716\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 2: 100%|██████████| 5/5 [00:01<00:00,  4.87it/s, Batch Loss=0.199, Batch Accuracy=0.944]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 2/50 - Loss: 0.3170, Accuracy: 0.8945\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3: 100%|██████████| 40/40 [00:09<00:00,  4.02it/s, Batch Loss=0.0127, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 3/50 - Loss: 0.0396, Accuracy: 0.9869\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3: 100%|██████████| 5/5 [00:00<00:00,  5.26it/s, Batch Loss=0.0444, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 3/50 - Loss: 0.0908, Accuracy: 0.9641\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4: 100%|██████████| 40/40 [00:09<00:00,  4.20it/s, Batch Loss=0.0108, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4/50 - Loss: 0.0382, Accuracy: 0.9892\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4: 100%|██████████| 5/5 [00:01<00:00,  3.92it/s, Batch Loss=0.00388, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 4/50 - Loss: 0.0407, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5: 100%|██████████| 40/40 [00:08<00:00,  4.45it/s, Batch Loss=0.00574, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 5/50 - Loss: 0.0265, Accuracy: 0.9929\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5: 100%|██████████| 5/5 [00:00<00:00,  5.03it/s, Batch Loss=0.0823, Batch Accuracy=0.944]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 5/50 - Loss: 0.1052, Accuracy: 0.9430\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6: 100%|██████████| 40/40 [00:09<00:00,  4.07it/s, Batch Loss=0.0124, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 6/50 - Loss: 0.0368, Accuracy: 0.9866\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6: 100%|██████████| 5/5 [00:00<00:00,  5.01it/s, Batch Loss=0.00712, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 6/50 - Loss: 0.0372, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7: 100%|██████████| 40/40 [00:09<00:00,  4.06it/s, Batch Loss=0.0162, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 7/50 - Loss: 0.0126, Accuracy: 0.9963\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7: 100%|██████████| 5/5 [00:01<00:00,  4.98it/s, Batch Loss=0.00511, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 7/50 - Loss: 0.0132, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8: 100%|██████████| 40/40 [00:09<00:00,  4.14it/s, Batch Loss=0.0188, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 8/50 - Loss: 0.0172, Accuracy: 0.9947\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8: 100%|██████████| 5/5 [00:01<00:00,  4.31it/s, Batch Loss=0.00354, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 8/50 - Loss: 0.0296, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9: 100%|██████████| 40/40 [00:08<00:00,  4.48it/s, Batch Loss=0.165, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 9/50 - Loss: 0.0185, Accuracy: 0.9953\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9: 100%|██████████| 5/5 [00:01<00:00,  4.41it/s, Batch Loss=0.00472, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 9/50 - Loss: 0.0437, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10: 100%|██████████| 40/40 [00:09<00:00,  4.10it/s, Batch Loss=0.00584, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 10/50 - Loss: 0.0194, Accuracy: 0.9955\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10: 100%|██████████| 5/5 [00:01<00:00,  4.90it/s, Batch Loss=0.45, Batch Accuracy=0.878]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 10/50 - Loss: 0.5406, Accuracy: 0.8692\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 11: 100%|██████████| 40/40 [00:09<00:00,  4.04it/s, Batch Loss=0.00128, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 11/50 - Loss: 0.0197, Accuracy: 0.9945\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 11: 100%|██████████| 5/5 [00:01<00:00,  4.88it/s, Batch Loss=0.0142, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 11/50 - Loss: 0.0404, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 12: 100%|██████████| 40/40 [00:10<00:00,  3.96it/s, Batch Loss=0.00131, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 12/50 - Loss: 0.0121, Accuracy: 0.9961\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 12: 100%|██████████| 5/5 [00:01<00:00,  4.91it/s, Batch Loss=0.00297, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 12/50 - Loss: 0.0791, Accuracy: 0.9789\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 13: 100%|██████████| 40/40 [00:09<00:00,  4.14it/s, Batch Loss=0.0762, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 13/50 - Loss: 0.0128, Accuracy: 0.9955\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 13: 100%|██████████| 5/5 [00:01<00:00,  3.73it/s, Batch Loss=0.00107, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 13/50 - Loss: 0.0191, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 14: 100%|██████████| 40/40 [00:09<00:00,  4.07it/s, Batch Loss=0.0114, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 14/50 - Loss: 0.0149, Accuracy: 0.9953\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 14: 100%|██████████| 5/5 [00:01<00:00,  4.73it/s, Batch Loss=0.0135, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 14/50 - Loss: 0.0439, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 15: 100%|██████████| 40/40 [00:10<00:00,  3.93it/s, Batch Loss=0.000717, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 15/50 - Loss: 0.0077, Accuracy: 0.9976\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 15: 100%|██████████| 5/5 [00:01<00:00,  4.86it/s, Batch Loss=0.000419, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 15/50 - Loss: 0.0513, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 16: 100%|██████████| 40/40 [00:10<00:00,  3.99it/s, Batch Loss=0.0149, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 16/50 - Loss: 0.0142, Accuracy: 0.9961\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 16: 100%|██████████| 5/5 [00:01<00:00,  5.00it/s, Batch Loss=0.000483, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 16/50 - Loss: 0.0391, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 17: 100%|██████████| 40/40 [00:09<00:00,  4.04it/s, Batch Loss=0.0014, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 17/50 - Loss: 0.0148, Accuracy: 0.9950\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 17: 100%|██████████| 5/5 [00:01<00:00,  4.57it/s, Batch Loss=0.0026, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 17/50 - Loss: 0.0732, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 18: 100%|██████████| 40/40 [00:08<00:00,  4.48it/s, Batch Loss=0.00129, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 18/50 - Loss: 0.0052, Accuracy: 0.9987\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 18: 100%|██████████| 5/5 [00:01<00:00,  4.21it/s, Batch Loss=0.000317, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 18/50 - Loss: 0.0246, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 19: 100%|██████████| 40/40 [00:09<00:00,  4.11it/s, Batch Loss=0.00496, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 19/50 - Loss: 0.0067, Accuracy: 0.9982\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 19: 100%|██████████| 5/5 [00:01<00:00,  4.96it/s, Batch Loss=0.000189, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 19/50 - Loss: 0.0686, Accuracy: 0.9789\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 20: 100%|██████████| 40/40 [00:09<00:00,  4.03it/s, Batch Loss=0.00348, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 20/50 - Loss: 0.0049, Accuracy: 0.9982\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 20: 100%|██████████| 5/5 [00:00<00:00,  5.13it/s, Batch Loss=0.00357, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 20/50 - Loss: 0.0338, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 21: 100%|██████████| 40/40 [00:09<00:00,  4.02it/s, Batch Loss=0.000175, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 21/50 - Loss: 0.0031, Accuracy: 0.9995\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 21: 100%|██████████| 5/5 [00:01<00:00,  4.84it/s, Batch Loss=0.000143, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 21/50 - Loss: 0.0387, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 22: 100%|██████████| 40/40 [00:09<00:00,  4.35it/s, Batch Loss=0.000951, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 22/50 - Loss: 0.0031, Accuracy: 0.9989\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 22: 100%|██████████| 5/5 [00:01<00:00,  3.71it/s, Batch Loss=7.95e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 22/50 - Loss: 0.0553, Accuracy: 0.9873\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 23: 100%|██████████| 40/40 [00:09<00:00,  4.17it/s, Batch Loss=0.0164, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 23/50 - Loss: 0.0095, Accuracy: 0.9971\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 23: 100%|██████████| 5/5 [00:01<00:00,  4.92it/s, Batch Loss=0.00987, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 23/50 - Loss: 0.0611, Accuracy: 0.9768\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 24: 100%|██████████| 40/40 [00:09<00:00,  4.01it/s, Batch Loss=0.00161, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 24/50 - Loss: 0.0257, Accuracy: 0.9921\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 24: 100%|██████████| 5/5 [00:01<00:00,  4.96it/s, Batch Loss=0.0169, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 24/50 - Loss: 0.0663, Accuracy: 0.9789\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 25: 100%|██████████| 40/40 [00:09<00:00,  4.02it/s, Batch Loss=0.165, Batch Accuracy=0.968]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 25/50 - Loss: 0.0322, Accuracy: 0.9874\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 25: 100%|██████████| 5/5 [00:01<00:00,  4.93it/s, Batch Loss=0.0959, Batch Accuracy=0.967]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 25/50 - Loss: 0.1645, Accuracy: 0.9409\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 26: 100%|██████████| 40/40 [00:09<00:00,  4.28it/s, Batch Loss=0.0431, Batch Accuracy=0.984]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 26/50 - Loss: 0.0319, Accuracy: 0.9916\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 26: 100%|██████████| 5/5 [00:01<00:00,  3.84it/s, Batch Loss=0.029, Batch Accuracy=0.967]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 26/50 - Loss: 0.0298, Accuracy: 0.9789\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 27: 100%|██████████| 40/40 [00:09<00:00,  4.38it/s, Batch Loss=0.0057, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 27/50 - Loss: 0.0214, Accuracy: 0.9913\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 27: 100%|██████████| 5/5 [00:00<00:00,  5.03it/s, Batch Loss=0.0216, Batch Accuracy=0.989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 27/50 - Loss: 0.0459, Accuracy: 0.9831\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 28: 100%|██████████| 40/40 [00:09<00:00,  4.08it/s, Batch Loss=8.69e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 28/50 - Loss: 0.0094, Accuracy: 0.9968\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 28: 100%|██████████| 5/5 [00:00<00:00,  5.05it/s, Batch Loss=0.00192, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 28/50 - Loss: 0.0462, Accuracy: 0.9810\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 29: 100%|██████████| 40/40 [00:09<00:00,  4.08it/s, Batch Loss=0.000771, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 29/50 - Loss: 0.0071, Accuracy: 0.9976\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 29: 100%|██████████| 5/5 [00:00<00:00,  5.06it/s, Batch Loss=0.000326, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 29/50 - Loss: 0.0165, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 30: 100%|██████████| 40/40 [00:09<00:00,  4.20it/s, Batch Loss=0.000861, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 30/50 - Loss: 0.0122, Accuracy: 0.9958\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 30: 100%|██████████| 5/5 [00:01<00:00,  3.95it/s, Batch Loss=0.000777, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 30/50 - Loss: 0.0344, Accuracy: 0.9852\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 31: 100%|██████████| 40/40 [00:08<00:00,  4.53it/s, Batch Loss=0.0106, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 31/50 - Loss: 0.0058, Accuracy: 0.9982\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 31: 100%|██████████| 5/5 [00:00<00:00,  5.03it/s, Batch Loss=0.000766, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 31/50 - Loss: 0.0215, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 32: 100%|██████████| 40/40 [00:09<00:00,  4.06it/s, Batch Loss=0.000104, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 32/50 - Loss: 0.0059, Accuracy: 0.9982\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 32: 100%|██████████| 5/5 [00:01<00:00,  4.97it/s, Batch Loss=0.000352, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 32/50 - Loss: 0.0111, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 33: 100%|██████████| 40/40 [00:09<00:00,  4.10it/s, Batch Loss=0.000134, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 33/50 - Loss: 0.0020, Accuracy: 0.9997\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 33: 100%|██████████| 5/5 [00:00<00:00,  5.13it/s, Batch Loss=0.00033, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 33/50 - Loss: 0.0192, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 34: 100%|██████████| 40/40 [00:09<00:00,  4.22it/s, Batch Loss=0.000204, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 34/50 - Loss: 0.0008, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 34: 100%|██████████| 5/5 [00:01<00:00,  4.41it/s, Batch Loss=0.000205, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 34/50 - Loss: 0.0278, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 35: 100%|██████████| 40/40 [00:08<00:00,  4.50it/s, Batch Loss=0.000672, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 35/50 - Loss: 0.0017, Accuracy: 0.9995\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 35: 100%|██████████| 5/5 [00:01<00:00,  4.16it/s, Batch Loss=0.000436, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 35/50 - Loss: 0.0225, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 36: 100%|██████████| 40/40 [00:09<00:00,  4.13it/s, Batch Loss=0.000288, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 36/50 - Loss: 0.0029, Accuracy: 0.9995\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 36: 100%|██████████| 5/5 [00:00<00:00,  5.16it/s, Batch Loss=0.000181, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 36/50 - Loss: 0.0287, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 37: 100%|██████████| 40/40 [00:09<00:00,  4.10it/s, Batch Loss=9.03e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 37/50 - Loss: 0.0004, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 37: 100%|██████████| 5/5 [00:00<00:00,  5.04it/s, Batch Loss=0.000129, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 37/50 - Loss: 0.0234, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 38: 100%|██████████| 40/40 [00:09<00:00,  4.08it/s, Batch Loss=0.00185, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 38/50 - Loss: 0.0002, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 38: 100%|██████████| 5/5 [00:00<00:00,  5.15it/s, Batch Loss=0.00013, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 38/50 - Loss: 0.0229, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 39: 100%|██████████| 40/40 [00:08<00:00,  4.53it/s, Batch Loss=0.000102, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 39/50 - Loss: 0.0002, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 39: 100%|██████████| 5/5 [00:01<00:00,  4.07it/s, Batch Loss=8.23e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 39/50 - Loss: 0.0240, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 40: 100%|██████████| 40/40 [00:09<00:00,  4.23it/s, Batch Loss=6.88e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 40/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 40: 100%|██████████| 5/5 [00:00<00:00,  5.02it/s, Batch Loss=7.36e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 40/50 - Loss: 0.0249, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 41: 100%|██████████| 40/40 [00:09<00:00,  4.12it/s, Batch Loss=5.5e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 41/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 41: 100%|██████████| 5/5 [00:01<00:00,  4.84it/s, Batch Loss=8.86e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 41/50 - Loss: 0.0243, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 42: 100%|██████████| 40/40 [00:09<00:00,  4.16it/s, Batch Loss=4.29e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 42/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 42: 100%|██████████| 5/5 [00:01<00:00,  4.93it/s, Batch Loss=4.55e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 42/50 - Loss: 0.0273, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 43: 100%|██████████| 40/40 [00:09<00:00,  4.40it/s, Batch Loss=6.63e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 43/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 43: 100%|██████████| 5/5 [00:01<00:00,  3.79it/s, Batch Loss=4.5e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 43/50 - Loss: 0.0271, Accuracy: 0.9958\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 44: 100%|██████████| 40/40 [00:09<00:00,  4.18it/s, Batch Loss=9.66e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 44/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 44: 100%|██████████| 5/5 [00:00<00:00,  5.14it/s, Batch Loss=5.86e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 44/50 - Loss: 0.0258, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 45: 100%|██████████| 40/40 [00:09<00:00,  4.11it/s, Batch Loss=0.000109, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 45/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 45: 100%|██████████| 5/5 [00:01<00:00,  4.99it/s, Batch Loss=3.55e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 45/50 - Loss: 0.0281, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 46: 100%|██████████| 40/40 [00:09<00:00,  4.04it/s, Batch Loss=0.000454, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 46/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 46: 100%|██████████| 5/5 [00:01<00:00,  4.84it/s, Batch Loss=6.11e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 46/50 - Loss: 0.0266, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 47: 100%|██████████| 40/40 [00:09<00:00,  4.26it/s, Batch Loss=1.72e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 47/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 47: 100%|██████████| 5/5 [00:01<00:00,  3.73it/s, Batch Loss=3.03e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 47/50 - Loss: 0.0288, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 48: 100%|██████████| 40/40 [00:09<00:00,  4.37it/s, Batch Loss=0.000115, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 48/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 48: 100%|██████████| 5/5 [00:00<00:00,  5.26it/s, Batch Loss=2.65e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 48/50 - Loss: 0.0289, Accuracy: 0.9937\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 49: 100%|██████████| 40/40 [00:09<00:00,  4.17it/s, Batch Loss=9.93e-6, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 49/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 49: 100%|██████████| 5/5 [00:00<00:00,  5.19it/s, Batch Loss=2.5e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 49/50 - Loss: 0.0292, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 50: 100%|██████████| 40/40 [00:09<00:00,  4.14it/s, Batch Loss=2.14e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 50/50 - Loss: 0.0001, Accuracy: 1.0000\n",
            "Validation:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 50: 100%|██████████| 5/5 [00:00<00:00,  5.04it/s, Batch Loss=2.5e-5, Batch Accuracy=1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Epoch 50/50 - Loss: 0.0294, Accuracy: 0.9916\n",
            "------------------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Testing: 100%|██████████| 5/5 [00:42<00:00,  8.43s/it, Batch Loss=0.0683, Batch Accuracy=0.969]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "Test Metrics:\n",
            "--------------------------------------------------\n",
            "Loss      : 0.0838\n",
            "Accuracy  : 0.9792\n",
            "Precision : 0.9735\n",
            "Recall    : 0.9735\n",
            "F1 Score  : 0.9735\n",
            "ROC AUC   : 0.9782\n",
            "==================================================\n",
            "Metrics for class 0:\n",
            "  Precision : 0.8824\n",
            "  Recall    : 1.0000\n",
            "  F1 Score  : 0.9375\n",
            "  ROC AUC   : 0.9846\n",
            "--------------------\n",
            "Metrics for class 1:\n",
            "  Precision : 1.0000\n",
            "  Recall    : 0.9429\n",
            "  F1 Score  : 0.9706\n",
            "  ROC AUC   : 0.9714\n",
            "--------------------\n",
            "Metrics for class 2:\n",
            "  Precision : 0.9918\n",
            "  Recall    : 0.9758\n",
            "  F1 Score  : 0.9837\n",
            "  ROC AUC   : 0.9740\n",
            "--------------------\n",
            "Summary Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      1.00      0.94        30\n",
            "           1       1.00      0.94      0.97        35\n",
            "           2       0.99      0.98      0.98       124\n",
            "\n",
            "   micro avg       0.97      0.97      0.97       189\n",
            "   macro avg       0.96      0.97      0.96       189\n",
            "weighted avg       0.98      0.97      0.97       189\n",
            " samples avg       0.94      0.94      0.94       189\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "I3VyIFGjTt38"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ldYiSt2aPNM6"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}